import re
import html

def sanitize_message(message: str) -> str:
    """
    Очищает сообщение от потенциально проблемных символов для кодировки
    """
    if not message:
        return message
    
    # Заменяем проблемные юникод-символы на безопасные эквиваленты
    replacements = {
        '→': '->',  # стрелка
        '←': '<-',  # обратная стрелка
        '↑': '^',   # вверх
        '↓': 'v',   # вниз
        '↔': '<->', # двунаправленная
        '↕': '<v>', # вертикальная
        '↵': 'cr',  # возврат каретки
        '⇐': '<=',  # двойная левая стрелка
        '⇒': '=>',  # двойная правая стрелка
        '⇔': '<=>', # двойная двунаправленная
        '⇑': '^^',  # двойная вверх
        '⇓': 'vv',  # двойная вниз
        '♠': '[S]', # пики
        '♣': '[C]', # крести
        '♥': '[H]', # червы
        '♦': '[D]', # бубны
        '™': '(TM)',# торговая марка
        '©': '(C)', # копирайт
        '®': '(R)', # зарегистрированный
        '§': 'par', # параграф
        '¶': 'pilcrow', # абзац
        '•': '*',   # маркер списка
        '·': '.',   # средняя точка
        '…': '...', # многоточие
        '‰': '%o',  # промилле
        '‹': '<',   # левая кавычка
        '›': '>',   # правая кавычка
        '″': '"',   # двойной штрих
        '‴': '"',   # тройной штрих
        '‹': '<',   # французская левая кавычка
        '›': '>',   # французская правая кавычка
        '«': '<<',  # немецкая левая кавычка
        '»': '>>',  # немецкая правая кавычка
        '„': '"',   # немецкая нижняя кавычка
        '“': '"',   # левая верхняя кавычка
        '”': '"',   # правая верхняя кавычка
        '‚': ',',   # нижняя одинарная кавычка
        '‘': "'",   # левая одинарная кавычка
        '’': "'",   # правая одинарная кавычка
    }
    
    sanitized = message
    for problematic, replacement in replacements.items():
        sanitized = sanitized.replace(problematic, replacement)
    
    # Экранируем остальные специальные символы, которые могут вызвать проблемы
    # Оставляем только безопасные ASCII символы плюс базовые юникод символы
    sanitized = sanitized.encode('ascii', errors='xmlcharrefreplace').decode('ascii')
    
    return sanitized

def sanitize_for_storage(text: str) -> str:
    """
    Очищает текст для безопасного хранения в базе данных
    """
    if not text:
        return text
        
    # Используем html.escape для дополнительной безопасности
    escaped = html.escape(text, quote=False)
    
    # Применяем нашу очистку
    return sanitize_message(escaped)

def deserialize_message(message: str) -> str:
    """
    Восстанавливает сообщение из безопасного формата (обратная операция)
    """
    # В текущей реализации просто возвращаем сообщение, 
    # так как основная цель - безопасное хранение и передача
    return message