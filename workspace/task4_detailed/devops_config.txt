Для выполнения задачи, я создам Dockerfile, который будет использовать pyrefactor без установки зависимостей в системе, а также настрою GitHub Actions workflow для запуска тестов при каждом пуше в репозиторий.

### Шаги:

1. **Создание Dockerfile**:
   - Используем официальный Python образ.
   - Скопируем необходимые файлы в контейнер.
   - Установим pyrefactor и его зависимости внутри контейнера.
   - Определим команду для запуска pyrefactor.

2. **Создание GitHub Actions Workflow**:
   - Настроим workflow для запуска тестов при каждом пуше.
   - Используем Docker контейнер для выполнения тестов.

Теперь приступим к реализации.

#### Dockerfile

```dockerfile
# Используем официальный Python образ
FROM python:3.9-slim

# Устанавливаем необходимые зависимости
RUN pip install --no-cache-dir pyrefactor

# Копируем текущий код в контейнер
WORKDIR /app
COPY . /app

# Определяем команду по умолчанию
CMD ["pyrefactor", "--help"]
```

#### GitHub Actions Workflow

```yaml
name: CI

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Docker image
      run: docker build -t pyrefactor-test .

    - name: Run tests
      run: docker run pyrefactor-test pytest
```

Теперь запишу эти файлы в соответствующие директории.