Для выполнения задачи по созданию базовых Docker-образов для Python и Node.js с монтированием кода через volume, я создам Dockerfile для каждого образа и соответствующие скрипты для запуска контейнеров с volume. 

### Шаги:

1. **Создать Dockerfile для Python (ci-python):**
   - Установить базовый образ Python.
   - Установить необходимые зависимости (если есть).
   - Настроить рабочую директорию.

2. **Создать Dockerfile для Node.js (ci-node):**
   - Установить базовый образ Node.js.
   - Установить необходимые зависимости (если есть).
   - Настроить рабочую директорию.

3. **Создать скрипты для запуска контейнеров с volume:**
   - Настроить монтирование текущей директории кода в контейнер.

Теперь я создам необходимые файлы и скрипты.

### Создание файлов:

#### 1. Dockerfile для Python (ci-python)

```dockerfile
# ./workspace/task5_detailed/ci-python/Dockerfile

# Используем официальный образ Python
FROM python:3.9-slim

# Устанавливаем рабочую директорию
WORKDIR /app

# Устанавливаем зависимости (если необходимо)
# COPY requirements.txt ./
# RUN pip install --no-cache-dir -r requirements.txt

# Команда по умолчанию
CMD ["python3"]
```

#### 2. Dockerfile для Node.js (ci-node)

```dockerfile
# ./workspace/task5_detailed/ci-node/Dockerfile

# Используем официальный образ Node.js
FROM node:14-slim

# Устанавливаем рабочую директорию
WORKDIR /app

# Устанавливаем зависимости (если необходимо)
# COPY package.json ./
# RUN npm install

# Команда по умолчанию
CMD ["node"]
```

#### 3. Скрипт для запуска Python контейнера с volume

```bash
# ./workspace/task5_detailed/run-python-container.sh

#!/bin/bash

docker run --rm -v "$(pwd)":/app -w /app ci-python
```

#### 4. Скрипт для запуска Node.js контейнера с volume

```bash
# ./workspace/task5_detailed/run-node-container.sh

#!/bin/bash

docker run --rm -v "$(pwd)":/app -w /app ci-node
```

Теперь я запишу эти файлы в соответствующие директории.